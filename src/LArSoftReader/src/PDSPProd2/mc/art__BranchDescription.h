//////////////////////////////////////////////////////////
//   This class has been generated by TFile::MakeProject
//     (Fri Apr 24 09:37:05 2020 by ROOT version 6.18/04)
//      from the StreamerInfo in file /pnfs/dune/archive/sam_managed_users/calcuttj/data/5/c/5/d/PDSPProd2_protoDUNE_sp_reco_35ms_sce_off_23503706_0_124d8226-6d53-4dbc-af94-340521eab19b_pma.root
//////////////////////////////////////////////////////////


#ifndef art__BranchDescription_h
#define art__BranchDescription_h
namespace art {
class BranchDescription;
} // end of namespace.

#include "Rtypes.h"
#include "Riostream.h"
#include <string>
#include "art__ProductID.h"
#include <set>
#include "fhicl__ParameterSetID.h"
#include "art__Hash_3_.h"
#include "art__Transient_art__BranchDescription__Transients_.h"
namespace art {
#ifndef art__BranchDescription_h
#define art__BranchDescription_h
enum BranchDescription::Transients { kDefault_BranchDescription::Transients };
#endif
} // end of namespace.

namespace art {
class BranchDescription {

public:
// Nested classes forward declaration.
enum Transients { kDefault_Transients };

public:
// Nested classes declaration.

public:
// Data Members.
   Int_t       branchType_;    //
   string      moduleLabel_;    //
   string      processName_;    //
   art::ProductID productID_;      //
   string         producedClassName_;    //
   string         friendlyClassName_;    //
   string         productInstanceName_;    //
   bool           supportsView_;           //
   std::vector<fhicl::ParameterSetID> psetIDs_;                //
   std::vector<art::Hash<3> >         processConfigurationIDs_;    //
   art::Transient<art::BranchDescription::Transients> transients_;                 //

   BranchDescription();
   BranchDescription(BranchDescription && ) = default;
   BranchDescription(const BranchDescription & );
   virtual ~BranchDescription();

   ClassDef(BranchDescription,16); // Generated by MakeProject.
};
} // namespace
#endif
