//////////////////////////////////////////////////////////
//   This class has been generated by TFile::MakeProject
//     (Fri Apr 24 09:37:06 2020 by ROOT version 6.18/04)
//      from the StreamerInfo in file /pnfs/dune/archive/sam_managed_users/calcuttj/data/5/c/5/d/PDSPProd2_protoDUNE_sp_reco_35ms_sce_off_23503706_0_124d8226-6d53-4dbc-af94-340521eab19b_pma.root
//////////////////////////////////////////////////////////


#ifndef art__Transient_art__BranchDescription__Transients__h
#define art__Transient_art__BranchDescription__Transients__h
namespace art {
#ifndef art__BranchDescription_h
#define art__BranchDescription_h
enum BranchDescription::Transients { kDefault_BranchDescription::Transients };
#endif
} // end of namespace.
namespace art {
template <typename T0> class Transient;
} // end of namespace.

#include "Rtypes.h"
namespace art {
#ifndef art__BranchDescription_h
#define art__BranchDescription_h
enum BranchDescription::Transients { kDefault_BranchDescription::Transients };
#endif
} // end of namespace.

#ifndef template_art__Transient_h
#define template_art__Transient_h
namespace art {
template <typename T0> class Transient {

public:
// Nested classes declaration.

public:
// Data Members.

   Transient() {
   }
   Transient(Transient && ) = default;
   Transient(const Transient & rhs )
{
   // This is NOT a copy constructor. This is actually a move constructor (for stl container's sake).
   // Use at your own risk!
   (void)rhs; // avoid warning about unused parameter
   }
   virtual ~Transient() {
   }

};
} // namespace
#endif // generic template declaration
#endif
